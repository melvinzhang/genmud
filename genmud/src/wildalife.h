
/* This header file contains the data for the wilderness AI. This makes
   a grid on top of the wilderness that allows populations of creatures
   to be simulated without actually having the creatures in the game. 

   The main data structures are the populations which reference societies 
   and the populations that live within each sector. */


typedef struct _population_data POPUL;
/* The sector grid is a SECTOR_MAX by SECTOR_MAX matrix. */

#define SECTOR_MAX              50 /* Max number of sectors in a direction. */


/* This is the size of each sector. */

#define SECTOR_SIZE  (WILDERNESS_SIZE/SECTOR_MAX) 

#define PULSE_SECTOR            (1*PULSE_PER_SECOND) /* Update sectors once a
						      second. */

#define POPUL_POWER_PER_RESOURCE  100  /* N power units uses up a unit
					  of resource. */

#define POPUL_SEED_COUNT          100  /* N populs of each type get reset 
					 into the world on reboot */

/* These are variables associated with creating the random encounters. */
#define ENCOUNTER_MAX_SIZE        6  /* Can encounter up to N things at once.*/
#define ENCOUNTER_RADIUS          2  /* They will appear up to N squares
					away from the player's location. */


#define HOMELAND_RADIUS           0  /* How far a homeland extends from
					its center sector. */

/* The resources in each sector are calculated based on the kinds of
   rooms in that sector. They are used by societies draining them,
   and the total production goes down as the societies get close
   to maxxing them out. */

/* Max resource production for each sector. */
extern int sector_max_res[SECTOR_MAX][SECTOR_MAX][RAW_MAX];

/* Current resource production in each sector. */
extern int sector_curr_res[SECTOR_MAX][SECTOR_MAX][RAW_MAX];

/* These are how many resources are being used by societies in the 
   sector right now. */
extern int sector_used_res[SECTOR_MAX][SECTOR_MAX][RAW_MAX];

/* These are the kinds of resources generated by different kinds of rooms
   that provide for the local carrying capacity of the map. */

extern const int room_resources[PIXMAP_MAX][RAW_MAX];




/* This is a list of the populations found in each sector. */
extern POPUL  *sector_populs[SECTOR_MAX][SECTOR_MAX];


/* This is a counter for the update function. Only some sectors get 
   updated every update. */
extern int sector_update;

/* Head for free list of population structs. */
extern POPUL*popul_free;

/* Keeps track of the number of population structs around. */

extern int popul_count;

/* Total number of populations made. (even if memory is reused) */
extern int popul_made;
/* This keeps track of the dominant terrain in each sector. */

extern char dominant_terrain[SECTOR_MAX][SECTOR_MAX];


/* This data structure holds the information for a population spawned from a given society in a sector. */


struct _population_data
{
 
  POPUL*next; /* Next population in the list for this sector.
		       Singly linked list since this should be a 
		       short list for each sector. */
  
  int power;  /* The total power of the population in the area. This is
		 used to determine population growth and it's what helps
		 determine what characters will encounter in the area. */

  /* What x and y sectors the population is in. */
  int x;
  int y; 
  
  short society;  /* Which society spawned this population. I am using
		   regular society code for this to save the effort
		   of coming up with something really similar. They
		   will only reference societies that can't be
		   destroyed to avoid duplicates. */
  short alert;  /* This is how on alert this population is. If it's getting
		   attacked a lot, it tends to go on alert more. Alert
		   lets friendly populations know that this one needs
		   some help. */
  short align;  /* The alignment of this population. */
};


/* Some base functions: */

/* Initialize variables: */

void init_popul_vars(void);

/* Create and destroy a single population. */
POPUL*new_popul(void);
void free_popul (POPUL*);

/* Read and write a single pop. */
void write_popul (FILE *, POPUL*);
POPUL *read_popul (FILE *);

/* Read and write the sector resources. */
void write_sector_resources (FILE *, int, int);
void read_sector_resources (FILE *);

/* Read and write all of the populations and sector data. */
void write_wildalife (void);
void read_wildalife (void);


/* Add a population to a sector and remove it. */
bool popul_to_sector (POPUL*, int x, int y);
void popul_from_sector (POPUL*); /* The population knows its x and y. */



/* This gives you info on the sectors. */

void do_sectors (THING *th, char *arg);

/* This calculates the raw materials available in each sector based
   on the terrain there. */

void calculate_sector_raws(int x, int y);

/* This updates the homelands of each population from time to time to make
   sure that those areas don't get killed off ever. */

void update_population_homelands(void);

/* This updates the sectors. This is done asynchronously so that only small
   areas get updated at once. The sectors to update are kept internally 
   by the sector_pulse variable. */

void update_wilderness_sectors (bool all_at_once);
void update_wilderness_sectors_event (void);
/* Update an individual sector. */

void update_sector (int x, int y);


/* These carry out smaller chunks of the sector update cycle to 
   make things a little simpler. */

int  population_resource_usage (int x, int y);
void population_growth (int x, int y, int resource_shortfall_pct);
void population_sector_attack (int x, int y, bool shortfall);
void population_alignment_attack (int x, int y);
void population_settle (int x, int y, bool shortfall);
void population_assist (int x, int y);
void population_sector_cleanup (int x, int y);

/* This carries out combat between populations. */

void population_attack (POPUL *attacker, POPUL *defender);

/* This finds a population with a certain society number in a sector. */

POPUL *find_popul_sector (int x, int y, int society);

/* This adds a population to a certain x and y location with a certain
   society number and a certain amount. */

void add_population_power (int x, int y, int society, int amount);

/* This seeds the wilderness map with populations so that they can
   expand and fight over time. */

void seed_populations (void);

/* This clears all populations off the map. */

void clear_all_sectors (void);

/* This creates an encounter for a player who is on the wilderness map. */

void create_encounter (THING *);


/* This loads some background mobs for the player to see and interact with. */


void create_animal_encounter (THING *);


/* This creates some society mobs for the player to see and interact with. */


void create_society_encounter (THING *);


/* This shows a map of the basic sectors. Good for overall view.
   It can also be used to show how a certain society (by name) is
   spreading. */

void show_sector_map (THING *, char *name);

/* This updates sector populations based on what population the thing
   being removed or creaeted is from. */

void update_sector_population_thing (THING *, bool add);
